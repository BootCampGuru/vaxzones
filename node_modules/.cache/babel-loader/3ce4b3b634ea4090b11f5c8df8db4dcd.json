{"ast":null,"code":"import _slicedToArray from \"/Users/ranjanbiswas/Documents/projects/VacZones/vaczones/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/ranjanbiswas/Documents/projects/VacZones/vaczones/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { max, min, sum } from \"d3-array\";\nimport { justify } from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths(_ref) {\n  var nodes = _ref.nodes;\n\n  var _iterator = _createForOfIteratorHelper(nodes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n      var y0 = node.y0;\n      var y1 = y0;\n\n      var _iterator2 = _createForOfIteratorHelper(node.sourceLinks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var link = _step2.value;\n          link.y0 = y0 + link.width / 2;\n          y0 += link.width;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(node.targetLinks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _link = _step3.value;\n          _link.y1 = y1 + _link.width / 2;\n          y1 += _link.width;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nexport default function Sankey() {\n  var x0 = 0,\n      y0 = 0,\n      x1 = 1,\n      y1 = 1; // extent\n\n  var dx = 24; // nodeWidth\n\n  var dy = 8,\n      py; // nodePadding\n\n  var id = defaultId;\n  var align = justify;\n  var sort;\n  var linkSort;\n  var nodes = defaultNodes;\n  var links = defaultLinks;\n  var iterations = 6;\n\n  function sankey() {\n    var graph = {\n      nodes: nodes.apply(null, arguments),\n      links: links.apply(null, arguments)\n    };\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function (graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function (_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function (_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function (_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function (_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function (_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function (_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function (_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function (_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function (_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function (_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function (_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks(_ref2) {\n    var nodes = _ref2.nodes,\n        links = _ref2.links;\n\n    var _iterator4 = _createForOfIteratorHelper(nodes.entries()),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n            i = _step4$value[0],\n            node = _step4$value[1];\n\n        node.index = i;\n        node.sourceLinks = [];\n        node.targetLinks = [];\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    var nodeById = new Map(nodes.map(function (d, i) {\n      return [id(d, i, nodes), d];\n    }));\n\n    var _iterator5 = _createForOfIteratorHelper(links.entries()),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n            _i = _step5$value[0],\n            link = _step5$value[1];\n\n        link.index = _i;\n        var source = link.source,\n            target = link.target;\n        if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n        if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n        source.sourceLinks.push(link);\n        target.targetLinks.push(link);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    if (linkSort != null) {\n      var _iterator6 = _createForOfIteratorHelper(nodes),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _step6.value,\n              sourceLinks = _step6$value.sourceLinks,\n              targetLinks = _step6$value.targetLinks;\n          sourceLinks.sort(linkSort);\n          targetLinks.sort(linkSort);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }\n\n  function computeNodeValues(_ref3) {\n    var nodes = _ref3.nodes;\n\n    var _iterator7 = _createForOfIteratorHelper(nodes),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var node = _step7.value;\n        node.value = node.fixedValue === undefined ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value)) : node.fixedValue;\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n  }\n\n  function computeNodeDepths(_ref4) {\n    var nodes = _ref4.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n\n    while (current.size) {\n      var _iterator8 = _createForOfIteratorHelper(current),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var node = _step8.value;\n          node.depth = x;\n\n          var _iterator9 = _createForOfIteratorHelper(node.sourceLinks),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var target = _step9.value.target;\n              next.add(target);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set();\n    }\n  }\n\n  function computeNodeHeights(_ref5) {\n    var nodes = _ref5.nodes;\n    var n = nodes.length;\n    var current = new Set(nodes);\n    var next = new Set();\n    var x = 0;\n\n    while (current.size) {\n      var _iterator10 = _createForOfIteratorHelper(current),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var node = _step10.value;\n          node.height = x;\n\n          var _iterator11 = _createForOfIteratorHelper(node.targetLinks),\n              _step11;\n\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var source = _step11.value.source;\n              next.add(source);\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set();\n    }\n  }\n\n  function computeNodeLayers(_ref6) {\n    var nodes = _ref6.nodes;\n    var x = max(nodes, function (d) {\n      return d.depth;\n    }) + 1;\n    var kx = (x1 - x0 - dx) / (x - 1);\n    var columns = new Array(x);\n\n    var _iterator12 = _createForOfIteratorHelper(nodes),\n        _step12;\n\n    try {\n      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n        var node = _step12.value;\n        var i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n        node.layer = i;\n        node.x0 = x0 + i * kx;\n        node.x1 = node.x0 + dx;\n        if (columns[i]) columns[i].push(node);else columns[i] = [node];\n      }\n    } catch (err) {\n      _iterator12.e(err);\n    } finally {\n      _iterator12.f();\n    }\n\n    if (sort) {\n      var _iterator13 = _createForOfIteratorHelper(columns),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var column = _step13.value;\n          column.sort(sort);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    var ky = min(columns, function (c) {\n      return (y1 - y0 - (c.length - 1) * py) / sum(c, value);\n    });\n\n    var _iterator14 = _createForOfIteratorHelper(columns),\n        _step14;\n\n    try {\n      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n        var _nodes = _step14.value;\n        var y = y0;\n\n        var _iterator15 = _createForOfIteratorHelper(_nodes),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var _node = _step15.value;\n            _node.y0 = y;\n            _node.y1 = y + _node.value * ky;\n            y = _node.y1 + py;\n\n            var _iterator16 = _createForOfIteratorHelper(_node.sourceLinks),\n                _step16;\n\n            try {\n              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n                var link = _step16.value;\n                link.width = link.value * ky;\n              }\n            } catch (err) {\n              _iterator16.e(err);\n            } finally {\n              _iterator16.f();\n            }\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n\n        y = (y1 - y + py) / (_nodes.length + 1);\n\n        for (var i = 0; i < _nodes.length; ++i) {\n          var node = _nodes[i];\n          node.y0 += y * (i + 1);\n          node.y1 += y * (i + 1);\n        }\n\n        reorderLinks(_nodes);\n      }\n    } catch (err) {\n      _iterator14.e(err);\n    } finally {\n      _iterator14.f();\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    var columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, function (c) {\n      return c.length;\n    }) - 1));\n    initializeNodeBreadths(columns);\n\n    for (var i = 0; i < iterations; ++i) {\n      var alpha = Math.pow(0.99, i);\n      var beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  } // Reposition each node based on its incoming (target) links.\n\n\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (var i = 1, n = columns.length; i < n; ++i) {\n      var column = columns[i];\n\n      var _iterator17 = _createForOfIteratorHelper(column),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var target = _step17.value;\n          var y = 0;\n          var w = 0;\n\n          var _iterator18 = _createForOfIteratorHelper(target.targetLinks),\n              _step18;\n\n          try {\n            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n              var _step18$value = _step18.value,\n                  source = _step18$value.source,\n                  _value = _step18$value.value;\n              var v = _value * (target.layer - source.layer);\n              y += targetTop(source, target) * v;\n              w += v;\n            }\n          } catch (err) {\n            _iterator18.e(err);\n          } finally {\n            _iterator18.f();\n          }\n\n          if (!(w > 0)) continue;\n\n          var _dy = (y / w - target.y0) * alpha;\n\n          target.y0 += _dy;\n          target.y1 += _dy;\n          reorderNodeLinks(target);\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  } // Reposition each node based on its outgoing (source) links.\n\n\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (var n = columns.length, i = n - 2; i >= 0; --i) {\n      var column = columns[i];\n\n      var _iterator19 = _createForOfIteratorHelper(column),\n          _step19;\n\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var source = _step19.value;\n          var y = 0;\n          var w = 0;\n\n          var _iterator20 = _createForOfIteratorHelper(source.sourceLinks),\n              _step20;\n\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var _step20$value = _step20.value,\n                  target = _step20$value.target,\n                  _value2 = _step20$value.value;\n              var v = _value2 * (target.layer - source.layer);\n              y += sourceTop(source, target) * v;\n              w += v;\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n\n          if (!(w > 0)) continue;\n\n          var _dy2 = (y / w - source.y0) * alpha;\n\n          source.y0 += _dy2;\n          source.y1 += _dy2;\n          reorderNodeLinks(source);\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    var i = nodes.length >> 1;\n    var subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  } // Push any overlapping nodes down.\n\n\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      var node = nodes[i];\n\n      var _dy3 = (y - node.y0) * alpha;\n\n      if (_dy3 > 1e-6) node.y0 += _dy3, node.y1 += _dy3;\n      y = node.y1 + py;\n    }\n  } // Push any overlapping nodes up.\n\n\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      var node = nodes[i];\n\n      var _dy4 = (node.y1 - y) * alpha;\n\n      if (_dy4 > 1e-6) node.y0 -= _dy4, node.y1 -= _dy4;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks(_ref7) {\n    var sourceLinks = _ref7.sourceLinks,\n        targetLinks = _ref7.targetLinks;\n\n    if (linkSort === undefined) {\n      var _iterator21 = _createForOfIteratorHelper(targetLinks),\n          _step21;\n\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var _sourceLinks = _step21.value.source.sourceLinks;\n\n          _sourceLinks.sort(ascendingTargetBreadth);\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n\n      var _iterator22 = _createForOfIteratorHelper(sourceLinks),\n          _step22;\n\n      try {\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var _targetLinks = _step22.value.target.targetLinks;\n\n          _targetLinks.sort(ascendingSourceBreadth);\n        }\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      var _iterator23 = _createForOfIteratorHelper(nodes),\n          _step23;\n\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n          var _step23$value = _step23.value,\n              sourceLinks = _step23$value.sourceLinks,\n              targetLinks = _step23$value.targetLinks;\n          sourceLinks.sort(ascendingTargetBreadth);\n          targetLinks.sort(ascendingSourceBreadth);\n        }\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n    }\n  } // Returns the target.y0 that would produce an ideal link from source to target.\n\n\n  function targetTop(source, target) {\n    var y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n\n    var _iterator24 = _createForOfIteratorHelper(source.sourceLinks),\n        _step24;\n\n    try {\n      for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n        var _step24$value = _step24.value,\n            node = _step24$value.target,\n            width = _step24$value.width;\n        if (node === target) break;\n        y += width + py;\n      }\n    } catch (err) {\n      _iterator24.e(err);\n    } finally {\n      _iterator24.f();\n    }\n\n    var _iterator25 = _createForOfIteratorHelper(target.targetLinks),\n        _step25;\n\n    try {\n      for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n        var _step25$value = _step25.value,\n            _node2 = _step25$value.source,\n            _width = _step25$value.width;\n        if (_node2 === source) break;\n        y -= _width;\n      }\n    } catch (err) {\n      _iterator25.e(err);\n    } finally {\n      _iterator25.f();\n    }\n\n    return y;\n  } // Returns the source.y0 that would produce an ideal link from source to target.\n\n\n  function sourceTop(source, target) {\n    var y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n\n    var _iterator26 = _createForOfIteratorHelper(target.targetLinks),\n        _step26;\n\n    try {\n      for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n        var _step26$value = _step26.value,\n            node = _step26$value.source,\n            width = _step26$value.width;\n        if (node === source) break;\n        y += width + py;\n      }\n    } catch (err) {\n      _iterator26.e(err);\n    } finally {\n      _iterator26.f();\n    }\n\n    var _iterator27 = _createForOfIteratorHelper(source.sourceLinks),\n        _step27;\n\n    try {\n      for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n        var _step27$value = _step27.value,\n            _node3 = _step27$value.target,\n            _width2 = _step27$value.width;\n        if (_node3 === target) break;\n        y -= _width2;\n      }\n    } catch (err) {\n      _iterator27.e(err);\n    } finally {\n      _iterator27.f();\n    }\n\n    return y;\n  }\n\n  return sankey;\n}","map":{"version":3,"sources":["/Users/ranjanbiswas/Documents/projects/VacZones/vaczones/node_modules/d3-sankey/src/sankey.js"],"names":["max","min","sum","justify","constant","ascendingSourceBreadth","a","b","ascendingBreadth","source","index","ascendingTargetBreadth","target","y0","value","d","defaultId","defaultNodes","graph","nodes","defaultLinks","links","find","nodeById","id","node","get","Error","computeLinkBreadths","y1","sourceLinks","link","width","targetLinks","Sankey","x0","x1","dx","dy","py","align","sort","linkSort","iterations","sankey","apply","arguments","computeNodeLinks","computeNodeValues","computeNodeDepths","computeNodeHeights","computeNodeBreadths","update","nodeId","_","length","nodeAlign","nodeSort","nodeWidth","nodePadding","size","extent","entries","i","Map","map","push","fixedValue","undefined","Math","n","current","Set","next","x","depth","add","height","computeNodeLayers","kx","columns","Array","floor","call","layer","column","initializeNodeBreadths","ky","c","y","reorderLinks","alpha","pow","beta","relaxRightToLeft","relaxLeftToRight","w","v","targetTop","reorderNodeLinks","resolveCollisions","sourceTop","subject","resolveCollisionsBottomToTop","resolveCollisionsTopToBottom"],"mappings":";;AAAA,SAAQA,GAAR,EAAaC,GAAb,EAAkBC,GAAlB,QAA4B,UAA5B;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;;AAEA,SAASC,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AACpC,SAAOC,gBAAgB,CAACF,CAAC,CAACG,MAAH,EAAWF,CAAC,CAACE,MAAb,CAAhB,IAAwCH,CAAC,CAACI,KAAF,GAAUH,CAAC,CAACG,KAA3D;AACD;;AAED,SAASC,sBAAT,CAAgCL,CAAhC,EAAmCC,CAAnC,EAAsC;AACpC,SAAOC,gBAAgB,CAACF,CAAC,CAACM,MAAH,EAAWL,CAAC,CAACK,MAAb,CAAhB,IAAwCN,CAAC,CAACI,KAAF,GAAUH,CAAC,CAACG,KAA3D;AACD;;AAED,SAASF,gBAAT,CAA0BF,CAA1B,EAA6BC,CAA7B,EAAgC;AAC9B,SAAOD,CAAC,CAACO,EAAF,GAAON,CAAC,CAACM,EAAhB;AACD;;AAED,SAASC,KAAT,CAAeC,CAAf,EAAkB;AAChB,SAAOA,CAAC,CAACD,KAAT;AACD;;AAED,SAASE,SAAT,CAAmBD,CAAnB,EAAsB;AACpB,SAAOA,CAAC,CAACL,KAAT;AACD;;AAED,SAASO,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAOA,KAAK,CAACC,KAAb;AACD;;AAED,SAASC,YAAT,CAAsBF,KAAtB,EAA6B;AAC3B,SAAOA,KAAK,CAACG,KAAb;AACD;;AAED,SAASC,IAAT,CAAcC,QAAd,EAAwBC,EAAxB,EAA4B;AAC1B,MAAMC,IAAI,GAAGF,QAAQ,CAACG,GAAT,CAAaF,EAAb,CAAb;AACA,MAAI,CAACC,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,cAAcH,EAAxB,CAAN;AACX,SAAOC,IAAP;AACD;;AAED,SAASG,mBAAT,OAAsC;AAAA,MAART,KAAQ,QAARA,KAAQ;;AAAA,6CACjBA,KADiB;AAAA;;AAAA;AACpC,wDAA0B;AAAA,UAAfM,IAAe;AACxB,UAAIZ,EAAE,GAAGY,IAAI,CAACZ,EAAd;AACA,UAAIgB,EAAE,GAAGhB,EAAT;;AAFwB,kDAGLY,IAAI,CAACK,WAHA;AAAA;;AAAA;AAGxB,+DAAqC;AAAA,cAA1BC,IAA0B;AACnCA,UAAAA,IAAI,CAAClB,EAAL,GAAUA,EAAE,GAAGkB,IAAI,CAACC,KAAL,GAAa,CAA5B;AACAnB,UAAAA,EAAE,IAAIkB,IAAI,CAACC,KAAX;AACD;AANuB;AAAA;AAAA;AAAA;AAAA;;AAAA,kDAOLP,IAAI,CAACQ,WAPA;AAAA;;AAAA;AAOxB,+DAAqC;AAAA,cAA1BF,KAA0B;AACnCA,UAAAA,KAAI,CAACF,EAAL,GAAUA,EAAE,GAAGE,KAAI,CAACC,KAAL,GAAa,CAA5B;AACAH,UAAAA,EAAE,IAAIE,KAAI,CAACC,KAAX;AACD;AAVuB;AAAA;AAAA;AAAA;AAAA;AAWzB;AAZmC;AAAA;AAAA;AAAA;AAAA;AAarC;;AAED,eAAe,SAASE,MAAT,GAAkB;AAC/B,MAAIC,EAAE,GAAG,CAAT;AAAA,MAAYtB,EAAE,GAAG,CAAjB;AAAA,MAAoBuB,EAAE,GAAG,CAAzB;AAAA,MAA4BP,EAAE,GAAG,CAAjC,CAD+B,CACK;;AACpC,MAAIQ,EAAE,GAAG,EAAT,CAF+B,CAElB;;AACb,MAAIC,EAAE,GAAG,CAAT;AAAA,MAAYC,EAAZ,CAH+B,CAGf;;AAChB,MAAIf,EAAE,GAAGR,SAAT;AACA,MAAIwB,KAAK,GAAGrC,OAAZ;AACA,MAAIsC,IAAJ;AACA,MAAIC,QAAJ;AACA,MAAIvB,KAAK,GAAGF,YAAZ;AACA,MAAII,KAAK,GAAGD,YAAZ;AACA,MAAIuB,UAAU,GAAG,CAAjB;;AAEA,WAASC,MAAT,GAAkB;AAChB,QAAM1B,KAAK,GAAG;AAACC,MAAAA,KAAK,EAAEA,KAAK,CAAC0B,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAR;AAAsCzB,MAAAA,KAAK,EAAEA,KAAK,CAACwB,KAAN,CAAY,IAAZ,EAAkBC,SAAlB;AAA7C,KAAd;AACAC,IAAAA,gBAAgB,CAAC7B,KAAD,CAAhB;AACA8B,IAAAA,iBAAiB,CAAC9B,KAAD,CAAjB;AACA+B,IAAAA,iBAAiB,CAAC/B,KAAD,CAAjB;AACAgC,IAAAA,kBAAkB,CAAChC,KAAD,CAAlB;AACAiC,IAAAA,mBAAmB,CAACjC,KAAD,CAAnB;AACAU,IAAAA,mBAAmB,CAACV,KAAD,CAAnB;AACA,WAAOA,KAAP;AACD;;AAED0B,EAAAA,MAAM,CAACQ,MAAP,GAAgB,UAASlC,KAAT,EAAgB;AAC9BU,IAAAA,mBAAmB,CAACV,KAAD,CAAnB;AACA,WAAOA,KAAP;AACD,GAHD;;AAKA0B,EAAAA,MAAM,CAACS,MAAP,GAAgB,UAASC,CAAT,EAAY;AAC1B,WAAOR,SAAS,CAACS,MAAV,IAAoB/B,EAAE,GAAG,OAAO8B,CAAP,KAAa,UAAb,GAA0BA,CAA1B,GAA8BlD,QAAQ,CAACkD,CAAD,CAA3C,EAAgDV,MAApE,IAA8EpB,EAArF;AACD,GAFD;;AAIAoB,EAAAA,MAAM,CAACY,SAAP,GAAmB,UAASF,CAAT,EAAY;AAC7B,WAAOR,SAAS,CAACS,MAAV,IAAoBf,KAAK,GAAG,OAAOc,CAAP,KAAa,UAAb,GAA0BA,CAA1B,GAA8BlD,QAAQ,CAACkD,CAAD,CAA9C,EAAmDV,MAAvE,IAAiFJ,KAAxF;AACD,GAFD;;AAIAI,EAAAA,MAAM,CAACa,QAAP,GAAkB,UAASH,CAAT,EAAY;AAC5B,WAAOR,SAAS,CAACS,MAAV,IAAoBd,IAAI,GAAGa,CAAP,EAAUV,MAA9B,IAAwCH,IAA/C;AACD,GAFD;;AAIAG,EAAAA,MAAM,CAACc,SAAP,GAAmB,UAASJ,CAAT,EAAY;AAC7B,WAAOR,SAAS,CAACS,MAAV,IAAoBlB,EAAE,GAAG,CAACiB,CAAN,EAASV,MAA7B,IAAuCP,EAA9C;AACD,GAFD;;AAIAO,EAAAA,MAAM,CAACe,WAAP,GAAqB,UAASL,CAAT,EAAY;AAC/B,WAAOR,SAAS,CAACS,MAAV,IAAoBjB,EAAE,GAAGC,EAAE,GAAG,CAACe,CAAX,EAAcV,MAAlC,IAA4CN,EAAnD;AACD,GAFD;;AAIAM,EAAAA,MAAM,CAACzB,KAAP,GAAe,UAASmC,CAAT,EAAY;AACzB,WAAOR,SAAS,CAACS,MAAV,IAAoBpC,KAAK,GAAG,OAAOmC,CAAP,KAAa,UAAb,GAA0BA,CAA1B,GAA8BlD,QAAQ,CAACkD,CAAD,CAA9C,EAAmDV,MAAvE,IAAiFzB,KAAxF;AACD,GAFD;;AAIAyB,EAAAA,MAAM,CAACvB,KAAP,GAAe,UAASiC,CAAT,EAAY;AACzB,WAAOR,SAAS,CAACS,MAAV,IAAoBlC,KAAK,GAAG,OAAOiC,CAAP,KAAa,UAAb,GAA0BA,CAA1B,GAA8BlD,QAAQ,CAACkD,CAAD,CAA9C,EAAmDV,MAAvE,IAAiFvB,KAAxF;AACD,GAFD;;AAIAuB,EAAAA,MAAM,CAACF,QAAP,GAAkB,UAASY,CAAT,EAAY;AAC5B,WAAOR,SAAS,CAACS,MAAV,IAAoBb,QAAQ,GAAGY,CAAX,EAAcV,MAAlC,IAA4CF,QAAnD;AACD,GAFD;;AAIAE,EAAAA,MAAM,CAACgB,IAAP,GAAc,UAASN,CAAT,EAAY;AACxB,WAAOR,SAAS,CAACS,MAAV,IAAoBpB,EAAE,GAAGtB,EAAE,GAAG,CAAV,EAAauB,EAAE,GAAG,CAACkB,CAAC,CAAC,CAAD,CAApB,EAAyBzB,EAAE,GAAG,CAACyB,CAAC,CAAC,CAAD,CAAhC,EAAqCV,MAAzD,IAAmE,CAACR,EAAE,GAAGD,EAAN,EAAUN,EAAE,GAAGhB,EAAf,CAA1E;AACD,GAFD;;AAIA+B,EAAAA,MAAM,CAACiB,MAAP,GAAgB,UAASP,CAAT,EAAY;AAC1B,WAAOR,SAAS,CAACS,MAAV,IAAoBpB,EAAE,GAAG,CAACmB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAN,EAAelB,EAAE,GAAG,CAACkB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAArB,EAA8BzC,EAAE,GAAG,CAACyC,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAApC,EAA6CzB,EAAE,GAAG,CAACyB,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAnD,EAA4DV,MAAhF,IAA0F,CAAC,CAACT,EAAD,EAAKtB,EAAL,CAAD,EAAW,CAACuB,EAAD,EAAKP,EAAL,CAAX,CAAjG;AACD,GAFD;;AAIAe,EAAAA,MAAM,CAACD,UAAP,GAAoB,UAASW,CAAT,EAAY;AAC9B,WAAOR,SAAS,CAACS,MAAV,IAAoBZ,UAAU,GAAG,CAACW,CAAd,EAAiBV,MAArC,IAA+CD,UAAtD;AACD,GAFD;;AAIA,WAASI,gBAAT,QAA0C;AAAA,QAAf5B,KAAe,SAAfA,KAAe;AAAA,QAARE,KAAQ,SAARA,KAAQ;;AAAA,gDAChBF,KAAK,CAAC2C,OAAN,EADgB;AAAA;;AAAA;AACxC,6DAAyC;AAAA;AAAA,YAA7BC,CAA6B;AAAA,YAA1BtC,IAA0B;;AACvCA,QAAAA,IAAI,CAACf,KAAL,GAAaqD,CAAb;AACAtC,QAAAA,IAAI,CAACK,WAAL,GAAmB,EAAnB;AACAL,QAAAA,IAAI,CAACQ,WAAL,GAAmB,EAAnB;AACD;AALuC;AAAA;AAAA;AAAA;AAAA;;AAMxC,QAAMV,QAAQ,GAAG,IAAIyC,GAAJ,CAAQ7C,KAAK,CAAC8C,GAAN,CAAU,UAAClD,CAAD,EAAIgD,CAAJ;AAAA,aAAU,CAACvC,EAAE,CAACT,CAAD,EAAIgD,CAAJ,EAAO5C,KAAP,CAAH,EAAkBJ,CAAlB,CAAV;AAAA,KAAV,CAAR,CAAjB;;AANwC,gDAOhBM,KAAK,CAACyC,OAAN,EAPgB;AAAA;;AAAA;AAOxC,6DAAyC;AAAA;AAAA,YAA7BC,EAA6B;AAAA,YAA1BhC,IAA0B;;AACvCA,QAAAA,IAAI,CAACrB,KAAL,GAAaqD,EAAb;AADuC,YAElCtD,MAFkC,GAEhBsB,IAFgB,CAElCtB,MAFkC;AAAA,YAE1BG,MAF0B,GAEhBmB,IAFgB,CAE1BnB,MAF0B;AAGvC,YAAI,OAAOH,MAAP,KAAkB,QAAtB,EAAgCA,MAAM,GAAGsB,IAAI,CAACtB,MAAL,GAAca,IAAI,CAACC,QAAD,EAAWd,MAAX,CAA3B;AAChC,YAAI,OAAOG,MAAP,KAAkB,QAAtB,EAAgCA,MAAM,GAAGmB,IAAI,CAACnB,MAAL,GAAcU,IAAI,CAACC,QAAD,EAAWX,MAAX,CAA3B;AAChCH,QAAAA,MAAM,CAACqB,WAAP,CAAmBoC,IAAnB,CAAwBnC,IAAxB;AACAnB,QAAAA,MAAM,CAACqB,WAAP,CAAmBiC,IAAnB,CAAwBnC,IAAxB;AACD;AAduC;AAAA;AAAA;AAAA;AAAA;;AAexC,QAAIW,QAAQ,IAAI,IAAhB,EAAsB;AAAA,kDACqBvB,KADrB;AAAA;;AAAA;AACpB,+DAAgD;AAAA;AAAA,cAApCW,WAAoC,gBAApCA,WAAoC;AAAA,cAAvBG,WAAuB,gBAAvBA,WAAuB;AAC9CH,UAAAA,WAAW,CAACW,IAAZ,CAAiBC,QAAjB;AACAT,UAAAA,WAAW,CAACQ,IAAZ,CAAiBC,QAAjB;AACD;AAJmB;AAAA;AAAA;AAAA;AAAA;AAKrB;AACF;;AAED,WAASM,iBAAT,QAAoC;AAAA,QAAR7B,KAAQ,SAARA,KAAQ;;AAAA,gDACfA,KADe;AAAA;;AAAA;AAClC,6DAA0B;AAAA,YAAfM,IAAe;AACxBA,QAAAA,IAAI,CAACX,KAAL,GAAaW,IAAI,CAAC0C,UAAL,KAAoBC,SAApB,GACPC,IAAI,CAACrE,GAAL,CAASE,GAAG,CAACuB,IAAI,CAACK,WAAN,EAAmBhB,KAAnB,CAAZ,EAAuCZ,GAAG,CAACuB,IAAI,CAACQ,WAAN,EAAmBnB,KAAnB,CAA1C,CADO,GAEPW,IAAI,CAAC0C,UAFX;AAGD;AALiC;AAAA;AAAA;AAAA;AAAA;AAMnC;;AAED,WAASlB,iBAAT,QAAoC;AAAA,QAAR9B,KAAQ,SAARA,KAAQ;AAClC,QAAMmD,CAAC,GAAGnD,KAAK,CAACoC,MAAhB;AACA,QAAIgB,OAAO,GAAG,IAAIC,GAAJ,CAAQrD,KAAR,CAAd;AACA,QAAIsD,IAAI,GAAG,IAAID,GAAJ,EAAX;AACA,QAAIE,CAAC,GAAG,CAAR;;AACA,WAAOH,OAAO,CAACX,IAAf,EAAqB;AAAA,kDACAW,OADA;AAAA;;AAAA;AACnB,+DAA4B;AAAA,cAAjB9C,IAAiB;AAC1BA,UAAAA,IAAI,CAACkD,KAAL,GAAaD,CAAb;;AAD0B,sDAEHjD,IAAI,CAACK,WAFF;AAAA;;AAAA;AAE1B,mEAAyC;AAAA,kBAA7BlB,MAA6B,gBAA7BA,MAA6B;AACvC6D,cAAAA,IAAI,CAACG,GAAL,CAAShE,MAAT;AACD;AAJyB;AAAA;AAAA;AAAA;AAAA;AAK3B;AANkB;AAAA;AAAA;AAAA;AAAA;;AAOnB,UAAI,EAAE8D,CAAF,GAAMJ,CAAV,EAAa,MAAM,IAAI3C,KAAJ,CAAU,eAAV,CAAN;AACb4C,MAAAA,OAAO,GAAGE,IAAV;AACAA,MAAAA,IAAI,GAAG,IAAID,GAAJ,EAAP;AACD;AACF;;AAED,WAAStB,kBAAT,QAAqC;AAAA,QAAR/B,KAAQ,SAARA,KAAQ;AACnC,QAAMmD,CAAC,GAAGnD,KAAK,CAACoC,MAAhB;AACA,QAAIgB,OAAO,GAAG,IAAIC,GAAJ,CAAQrD,KAAR,CAAd;AACA,QAAIsD,IAAI,GAAG,IAAID,GAAJ,EAAX;AACA,QAAIE,CAAC,GAAG,CAAR;;AACA,WAAOH,OAAO,CAACX,IAAf,EAAqB;AAAA,mDACAW,OADA;AAAA;;AAAA;AACnB,kEAA4B;AAAA,cAAjB9C,IAAiB;AAC1BA,UAAAA,IAAI,CAACoD,MAAL,GAAcH,CAAd;;AAD0B,uDAEHjD,IAAI,CAACQ,WAFF;AAAA;;AAAA;AAE1B,sEAAyC;AAAA,kBAA7BxB,MAA6B,iBAA7BA,MAA6B;AACvCgE,cAAAA,IAAI,CAACG,GAAL,CAASnE,MAAT;AACD;AAJyB;AAAA;AAAA;AAAA;AAAA;AAK3B;AANkB;AAAA;AAAA;AAAA;AAAA;;AAOnB,UAAI,EAAEiE,CAAF,GAAMJ,CAAV,EAAa,MAAM,IAAI3C,KAAJ,CAAU,eAAV,CAAN;AACb4C,MAAAA,OAAO,GAAGE,IAAV;AACAA,MAAAA,IAAI,GAAG,IAAID,GAAJ,EAAP;AACD;AACF;;AAED,WAASM,iBAAT,QAAoC;AAAA,QAAR3D,KAAQ,SAARA,KAAQ;AAClC,QAAMuD,CAAC,GAAG1E,GAAG,CAACmB,KAAD,EAAQ,UAAAJ,CAAC;AAAA,aAAIA,CAAC,CAAC4D,KAAN;AAAA,KAAT,CAAH,GAA2B,CAArC;AACA,QAAMI,EAAE,GAAG,CAAC3C,EAAE,GAAGD,EAAL,GAAUE,EAAX,KAAkBqC,CAAC,GAAG,CAAtB,CAAX;AACA,QAAMM,OAAO,GAAG,IAAIC,KAAJ,CAAUP,CAAV,CAAhB;;AAHkC,iDAIfvD,KAJe;AAAA;;AAAA;AAIlC,gEAA0B;AAAA,YAAfM,IAAe;AACxB,YAAMsC,CAAC,GAAGM,IAAI,CAACrE,GAAL,CAAS,CAAT,EAAYqE,IAAI,CAACpE,GAAL,CAASyE,CAAC,GAAG,CAAb,EAAgBL,IAAI,CAACa,KAAL,CAAW1C,KAAK,CAAC2C,IAAN,CAAW,IAAX,EAAiB1D,IAAjB,EAAuBiD,CAAvB,CAAX,CAAhB,CAAZ,CAAV;AACAjD,QAAAA,IAAI,CAAC2D,KAAL,GAAarB,CAAb;AACAtC,QAAAA,IAAI,CAACU,EAAL,GAAUA,EAAE,GAAG4B,CAAC,GAAGgB,EAAnB;AACAtD,QAAAA,IAAI,CAACW,EAAL,GAAUX,IAAI,CAACU,EAAL,GAAUE,EAApB;AACA,YAAI2C,OAAO,CAACjB,CAAD,CAAX,EAAgBiB,OAAO,CAACjB,CAAD,CAAP,CAAWG,IAAX,CAAgBzC,IAAhB,EAAhB,KACKuD,OAAO,CAACjB,CAAD,CAAP,GAAa,CAACtC,IAAD,CAAb;AACN;AAXiC;AAAA;AAAA;AAAA;AAAA;;AAYlC,QAAIgB,IAAJ;AAAA,mDAA+BuC,OAA/B;AAAA;;AAAA;AAAU,kEAA8B;AAAA,cAAnBK,MAAmB;AACtCA,UAAAA,MAAM,CAAC5C,IAAP,CAAYA,IAAZ;AACD;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,WAAOuC,OAAP;AACD;;AAED,WAASM,sBAAT,CAAgCN,OAAhC,EAAyC;AACvC,QAAMO,EAAE,GAAGtF,GAAG,CAAC+E,OAAD,EAAU,UAAAQ,CAAC;AAAA,aAAI,CAAC3D,EAAE,GAAGhB,EAAL,GAAU,CAAC2E,CAAC,CAACjC,MAAF,GAAW,CAAZ,IAAiBhB,EAA5B,IAAkCrC,GAAG,CAACsF,CAAD,EAAI1E,KAAJ,CAAzC;AAAA,KAAX,CAAd;;AADuC,iDAEnBkE,OAFmB;AAAA;;AAAA;AAEvC,gEAA6B;AAAA,YAAlB7D,MAAkB;AAC3B,YAAIsE,CAAC,GAAG5E,EAAR;;AAD2B,qDAERM,MAFQ;AAAA;;AAAA;AAE3B,oEAA0B;AAAA,gBAAfM,KAAe;AACxBA,YAAAA,KAAI,CAACZ,EAAL,GAAU4E,CAAV;AACAhE,YAAAA,KAAI,CAACI,EAAL,GAAU4D,CAAC,GAAGhE,KAAI,CAACX,KAAL,GAAayE,EAA3B;AACAE,YAAAA,CAAC,GAAGhE,KAAI,CAACI,EAAL,GAAUU,EAAd;;AAHwB,yDAILd,KAAI,CAACK,WAJA;AAAA;;AAAA;AAIxB,wEAAqC;AAAA,oBAA1BC,IAA0B;AACnCA,gBAAAA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACjB,KAAL,GAAayE,EAA1B;AACD;AANuB;AAAA;AAAA;AAAA;AAAA;AAOzB;AAT0B;AAAA;AAAA;AAAA;AAAA;;AAU3BE,QAAAA,CAAC,GAAG,CAAC5D,EAAE,GAAG4D,CAAL,GAASlD,EAAV,KAAiBpB,MAAK,CAACoC,MAAN,GAAe,CAAhC,CAAJ;;AACA,aAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,MAAK,CAACoC,MAA1B,EAAkC,EAAEQ,CAApC,EAAuC;AACrC,cAAMtC,IAAI,GAAGN,MAAK,CAAC4C,CAAD,CAAlB;AACAtC,UAAAA,IAAI,CAACZ,EAAL,IAAW4E,CAAC,IAAI1B,CAAC,GAAG,CAAR,CAAZ;AACAtC,UAAAA,IAAI,CAACI,EAAL,IAAW4D,CAAC,IAAI1B,CAAC,GAAG,CAAR,CAAZ;AACD;;AACD2B,QAAAA,YAAY,CAACvE,MAAD,CAAZ;AACD;AAnBsC;AAAA;AAAA;AAAA;AAAA;AAoBxC;;AAED,WAASgC,mBAAT,CAA6BjC,KAA7B,EAAoC;AAClC,QAAM8D,OAAO,GAAGF,iBAAiB,CAAC5D,KAAD,CAAjC;AACAqB,IAAAA,EAAE,GAAG8B,IAAI,CAACpE,GAAL,CAASqC,EAAT,EAAa,CAACT,EAAE,GAAGhB,EAAN,KAAab,GAAG,CAACgF,OAAD,EAAU,UAAAQ,CAAC;AAAA,aAAIA,CAAC,CAACjC,MAAN;AAAA,KAAX,CAAH,GAA8B,CAA3C,CAAb,CAAL;AACA+B,IAAAA,sBAAsB,CAACN,OAAD,CAAtB;;AACA,SAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,UAApB,EAAgC,EAAEoB,CAAlC,EAAqC;AACnC,UAAM4B,KAAK,GAAGtB,IAAI,CAACuB,GAAL,CAAS,IAAT,EAAe7B,CAAf,CAAd;AACA,UAAM8B,IAAI,GAAGxB,IAAI,CAACrE,GAAL,CAAS,IAAI2F,KAAb,EAAoB,CAAC5B,CAAC,GAAG,CAAL,IAAUpB,UAA9B,CAAb;AACAmD,MAAAA,gBAAgB,CAACd,OAAD,EAAUW,KAAV,EAAiBE,IAAjB,CAAhB;AACAE,MAAAA,gBAAgB,CAACf,OAAD,EAAUW,KAAV,EAAiBE,IAAjB,CAAhB;AACD;AACF,GA7L8B,CA+L/B;;;AACA,WAASE,gBAAT,CAA0Bf,OAA1B,EAAmCW,KAAnC,EAA0CE,IAA1C,EAAgD;AAC9C,SAAK,IAAI9B,CAAC,GAAG,CAAR,EAAWO,CAAC,GAAGU,OAAO,CAACzB,MAA5B,EAAoCQ,CAAC,GAAGO,CAAxC,EAA2C,EAAEP,CAA7C,EAAgD;AAC9C,UAAMsB,MAAM,GAAGL,OAAO,CAACjB,CAAD,CAAtB;;AAD8C,mDAEzBsB,MAFyB;AAAA;;AAAA;AAE9C,kEAA6B;AAAA,cAAlBzE,MAAkB;AAC3B,cAAI6E,CAAC,GAAG,CAAR;AACA,cAAIO,CAAC,GAAG,CAAR;;AAF2B,uDAGGpF,MAAM,CAACqB,WAHV;AAAA;;AAAA;AAG3B,sEAAkD;AAAA;AAAA,kBAAtCxB,MAAsC,iBAAtCA,MAAsC;AAAA,kBAA9BK,MAA8B,iBAA9BA,KAA8B;AAChD,kBAAImF,CAAC,GAAGnF,MAAK,IAAIF,MAAM,CAACwE,KAAP,GAAe3E,MAAM,CAAC2E,KAA1B,CAAb;AACAK,cAAAA,CAAC,IAAIS,SAAS,CAACzF,MAAD,EAASG,MAAT,CAAT,GAA4BqF,CAAjC;AACAD,cAAAA,CAAC,IAAIC,CAAL;AACD;AAP0B;AAAA;AAAA;AAAA;AAAA;;AAQ3B,cAAI,EAAED,CAAC,GAAG,CAAN,CAAJ,EAAc;;AACd,cAAI1D,GAAE,GAAG,CAACmD,CAAC,GAAGO,CAAJ,GAAQpF,MAAM,CAACC,EAAhB,IAAsB8E,KAA/B;;AACA/E,UAAAA,MAAM,CAACC,EAAP,IAAayB,GAAb;AACA1B,UAAAA,MAAM,CAACiB,EAAP,IAAaS,GAAb;AACA6D,UAAAA,gBAAgB,CAACvF,MAAD,CAAhB;AACD;AAf6C;AAAA;AAAA;AAAA;AAAA;;AAgB9C,UAAI6B,IAAI,KAAK2B,SAAb,EAAwBiB,MAAM,CAAC5C,IAAP,CAAYjC,gBAAZ;AACxB4F,MAAAA,iBAAiB,CAACf,MAAD,EAASQ,IAAT,CAAjB;AACD;AACF,GApN8B,CAsN/B;;;AACA,WAASC,gBAAT,CAA0Bd,OAA1B,EAAmCW,KAAnC,EAA0CE,IAA1C,EAAgD;AAC9C,SAAK,IAAIvB,CAAC,GAAGU,OAAO,CAACzB,MAAhB,EAAwBQ,CAAC,GAAGO,CAAC,GAAG,CAArC,EAAwCP,CAAC,IAAI,CAA7C,EAAgD,EAAEA,CAAlD,EAAqD;AACnD,UAAMsB,MAAM,GAAGL,OAAO,CAACjB,CAAD,CAAtB;;AADmD,mDAE9BsB,MAF8B;AAAA;;AAAA;AAEnD,kEAA6B;AAAA,cAAlB5E,MAAkB;AAC3B,cAAIgF,CAAC,GAAG,CAAR;AACA,cAAIO,CAAC,GAAG,CAAR;;AAF2B,uDAGGvF,MAAM,CAACqB,WAHV;AAAA;;AAAA;AAG3B,sEAAkD;AAAA;AAAA,kBAAtClB,MAAsC,iBAAtCA,MAAsC;AAAA,kBAA9BE,OAA8B,iBAA9BA,KAA8B;AAChD,kBAAImF,CAAC,GAAGnF,OAAK,IAAIF,MAAM,CAACwE,KAAP,GAAe3E,MAAM,CAAC2E,KAA1B,CAAb;AACAK,cAAAA,CAAC,IAAIY,SAAS,CAAC5F,MAAD,EAASG,MAAT,CAAT,GAA4BqF,CAAjC;AACAD,cAAAA,CAAC,IAAIC,CAAL;AACD;AAP0B;AAAA;AAAA;AAAA;AAAA;;AAQ3B,cAAI,EAAED,CAAC,GAAG,CAAN,CAAJ,EAAc;;AACd,cAAI1D,IAAE,GAAG,CAACmD,CAAC,GAAGO,CAAJ,GAAQvF,MAAM,CAACI,EAAhB,IAAsB8E,KAA/B;;AACAlF,UAAAA,MAAM,CAACI,EAAP,IAAayB,IAAb;AACA7B,UAAAA,MAAM,CAACoB,EAAP,IAAaS,IAAb;AACA6D,UAAAA,gBAAgB,CAAC1F,MAAD,CAAhB;AACD;AAfkD;AAAA;AAAA;AAAA;AAAA;;AAgBnD,UAAIgC,IAAI,KAAK2B,SAAb,EAAwBiB,MAAM,CAAC5C,IAAP,CAAYjC,gBAAZ;AACxB4F,MAAAA,iBAAiB,CAACf,MAAD,EAASQ,IAAT,CAAjB;AACD;AACF;;AAED,WAASO,iBAAT,CAA2BjF,KAA3B,EAAkCwE,KAAlC,EAAyC;AACvC,QAAM5B,CAAC,GAAG5C,KAAK,CAACoC,MAAN,IAAgB,CAA1B;AACA,QAAM+C,OAAO,GAAGnF,KAAK,CAAC4C,CAAD,CAArB;AACAwC,IAAAA,4BAA4B,CAACpF,KAAD,EAAQmF,OAAO,CAACzF,EAAR,GAAa0B,EAArB,EAAyBwB,CAAC,GAAG,CAA7B,EAAgC4B,KAAhC,CAA5B;AACAa,IAAAA,4BAA4B,CAACrF,KAAD,EAAQmF,OAAO,CAACzE,EAAR,GAAaU,EAArB,EAAyBwB,CAAC,GAAG,CAA7B,EAAgC4B,KAAhC,CAA5B;AACAY,IAAAA,4BAA4B,CAACpF,KAAD,EAAQU,EAAR,EAAYV,KAAK,CAACoC,MAAN,GAAe,CAA3B,EAA8BoC,KAA9B,CAA5B;AACAa,IAAAA,4BAA4B,CAACrF,KAAD,EAAQN,EAAR,EAAY,CAAZ,EAAe8E,KAAf,CAA5B;AACD,GApP8B,CAsP/B;;;AACA,WAASa,4BAAT,CAAsCrF,KAAtC,EAA6CsE,CAA7C,EAAgD1B,CAAhD,EAAmD4B,KAAnD,EAA0D;AACxD,WAAO5B,CAAC,GAAG5C,KAAK,CAACoC,MAAjB,EAAyB,EAAEQ,CAA3B,EAA8B;AAC5B,UAAMtC,IAAI,GAAGN,KAAK,CAAC4C,CAAD,CAAlB;;AACA,UAAMzB,IAAE,GAAG,CAACmD,CAAC,GAAGhE,IAAI,CAACZ,EAAV,IAAgB8E,KAA3B;;AACA,UAAIrD,IAAE,GAAG,IAAT,EAAeb,IAAI,CAACZ,EAAL,IAAWyB,IAAX,EAAeb,IAAI,CAACI,EAAL,IAAWS,IAA1B;AACfmD,MAAAA,CAAC,GAAGhE,IAAI,CAACI,EAAL,GAAUU,EAAd;AACD;AACF,GA9P8B,CAgQ/B;;;AACA,WAASgE,4BAAT,CAAsCpF,KAAtC,EAA6CsE,CAA7C,EAAgD1B,CAAhD,EAAmD4B,KAAnD,EAA0D;AACxD,WAAO5B,CAAC,IAAI,CAAZ,EAAe,EAAEA,CAAjB,EAAoB;AAClB,UAAMtC,IAAI,GAAGN,KAAK,CAAC4C,CAAD,CAAlB;;AACA,UAAMzB,IAAE,GAAG,CAACb,IAAI,CAACI,EAAL,GAAU4D,CAAX,IAAgBE,KAA3B;;AACA,UAAIrD,IAAE,GAAG,IAAT,EAAeb,IAAI,CAACZ,EAAL,IAAWyB,IAAX,EAAeb,IAAI,CAACI,EAAL,IAAWS,IAA1B;AACfmD,MAAAA,CAAC,GAAGhE,IAAI,CAACZ,EAAL,GAAU0B,EAAd;AACD;AACF;;AAED,WAAS4D,gBAAT,QAAsD;AAAA,QAA3BrE,WAA2B,SAA3BA,WAA2B;AAAA,QAAdG,WAAc,SAAdA,WAAc;;AACpD,QAAIS,QAAQ,KAAK0B,SAAjB,EAA4B;AAAA,mDACYnC,WADZ;AAAA;;AAAA;AAC1B,kEAAmD;AAAA,cAA9BH,YAA8B,iBAAvCrB,MAAuC,CAA9BqB,WAA8B;;AACjDA,UAAAA,YAAW,CAACW,IAAZ,CAAiB9B,sBAAjB;AACD;AAHyB;AAAA;AAAA;AAAA;AAAA;;AAAA,mDAIYmB,WAJZ;AAAA;;AAAA;AAI1B,kEAAmD;AAAA,cAA9BG,YAA8B,iBAAvCrB,MAAuC,CAA9BqB,WAA8B;;AACjDA,UAAAA,YAAW,CAACQ,IAAZ,CAAiBpC,sBAAjB;AACD;AANyB;AAAA;AAAA;AAAA;AAAA;AAO3B;AACF;;AAED,WAASqF,YAAT,CAAsBvE,KAAtB,EAA6B;AAC3B,QAAIuB,QAAQ,KAAK0B,SAAjB,EAA4B;AAAA,mDACejD,KADf;AAAA;;AAAA;AAC1B,kEAAgD;AAAA;AAAA,cAApCW,WAAoC,iBAApCA,WAAoC;AAAA,cAAvBG,WAAuB,iBAAvBA,WAAuB;AAC9CH,UAAAA,WAAW,CAACW,IAAZ,CAAiB9B,sBAAjB;AACAsB,UAAAA,WAAW,CAACQ,IAAZ,CAAiBpC,sBAAjB;AACD;AAJyB;AAAA;AAAA;AAAA;AAAA;AAK3B;AACF,GA5R8B,CA8R/B;;;AACA,WAAS6F,SAAT,CAAmBzF,MAAnB,EAA2BG,MAA3B,EAAmC;AACjC,QAAI6E,CAAC,GAAGhF,MAAM,CAACI,EAAP,GAAY,CAACJ,MAAM,CAACqB,WAAP,CAAmByB,MAAnB,GAA4B,CAA7B,IAAkChB,EAAlC,GAAuC,CAA3D;;AADiC,iDAEG9B,MAAM,CAACqB,WAFV;AAAA;;AAAA;AAEjC,gEAAwD;AAAA;AAAA,YAApCL,IAAoC,iBAA5Cb,MAA4C;AAAA,YAA9BoB,KAA8B,iBAA9BA,KAA8B;AACtD,YAAIP,IAAI,KAAKb,MAAb,EAAqB;AACrB6E,QAAAA,CAAC,IAAIzD,KAAK,GAAGO,EAAb;AACD;AALgC;AAAA;AAAA;AAAA;AAAA;;AAAA,iDAMG3B,MAAM,CAACqB,WANV;AAAA;;AAAA;AAMjC,gEAAwD;AAAA;AAAA,YAApCR,MAAoC,iBAA5ChB,MAA4C;AAAA,YAA9BuB,MAA8B,iBAA9BA,KAA8B;AACtD,YAAIP,MAAI,KAAKhB,MAAb,EAAqB;AACrBgF,QAAAA,CAAC,IAAIzD,MAAL;AACD;AATgC;AAAA;AAAA;AAAA;AAAA;;AAUjC,WAAOyD,CAAP;AACD,GA1S8B,CA4S/B;;;AACA,WAASY,SAAT,CAAmB5F,MAAnB,EAA2BG,MAA3B,EAAmC;AACjC,QAAI6E,CAAC,GAAG7E,MAAM,CAACC,EAAP,GAAY,CAACD,MAAM,CAACqB,WAAP,CAAmBsB,MAAnB,GAA4B,CAA7B,IAAkChB,EAAlC,GAAuC,CAA3D;;AADiC,iDAEG3B,MAAM,CAACqB,WAFV;AAAA;;AAAA;AAEjC,gEAAwD;AAAA;AAAA,YAApCR,IAAoC,iBAA5ChB,MAA4C;AAAA,YAA9BuB,KAA8B,iBAA9BA,KAA8B;AACtD,YAAIP,IAAI,KAAKhB,MAAb,EAAqB;AACrBgF,QAAAA,CAAC,IAAIzD,KAAK,GAAGO,EAAb;AACD;AALgC;AAAA;AAAA;AAAA;AAAA;;AAAA,iDAMG9B,MAAM,CAACqB,WANV;AAAA;;AAAA;AAMjC,gEAAwD;AAAA;AAAA,YAApCL,MAAoC,iBAA5Cb,MAA4C;AAAA,YAA9BoB,OAA8B,iBAA9BA,KAA8B;AACtD,YAAIP,MAAI,KAAKb,MAAb,EAAqB;AACrB6E,QAAAA,CAAC,IAAIzD,OAAL;AACD;AATgC;AAAA;AAAA;AAAA;AAAA;;AAUjC,WAAOyD,CAAP;AACD;;AAED,SAAO7C,MAAP;AACD","sourcesContent":["import {max, min, sum} from \"d3-array\";\nimport {justify} from \"./align.js\";\nimport constant from \"./constant.js\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  const node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nfunction computeLinkBreadths({nodes}) {\n  for (const node of nodes) {\n    let y0 = node.y0;\n    let y1 = y0;\n    for (const link of node.sourceLinks) {\n      link.y0 = y0 + link.width / 2;\n      y0 += link.width;\n    }\n    for (const link of node.targetLinks) {\n      link.y1 = y1 + link.width / 2;\n      y1 += link.width;\n    }\n  }\n}\n\nexport default function Sankey() {\n  let x0 = 0, y0 = 0, x1 = 1, y1 = 1; // extent\n  let dx = 24; // nodeWidth\n  let dy = 8, py; // nodePadding\n  let id = defaultId;\n  let align = justify;\n  let sort;\n  let linkSort;\n  let nodes = defaultNodes;\n  let links = defaultLinks;\n  let iterations = 6;\n\n  function sankey() {\n    const graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeHeights(graph);\n    computeNodeBreadths(graph);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeSort = function(_) {\n    return arguments.length ? (sort = _, sankey) : sort;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (dy = py = +_, sankey) : dy;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.linkSort = function(_) {\n    return arguments.length ? (linkSort = _, sankey) : linkSort;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  function computeNodeLinks({nodes, links}) {\n    for (const [i, node] of nodes.entries()) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    }\n    const nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d]));\n    for (const [i, link] of links.entries()) {\n      link.index = i;\n      let {source, target} = link;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    }\n    if (linkSort != null) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(linkSort);\n        targetLinks.sort(linkSort);\n      }\n    }\n  }\n\n  function computeNodeValues({nodes}) {\n    for (const node of nodes) {\n      node.value = node.fixedValue === undefined\n          ? Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value))\n          : node.fixedValue;\n    }\n  }\n\n  function computeNodeDepths({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.depth = x;\n        for (const {target} of node.sourceLinks) {\n          next.add(target);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeHeights({nodes}) {\n    const n = nodes.length;\n    let current = new Set(nodes);\n    let next = new Set;\n    let x = 0;\n    while (current.size) {\n      for (const node of current) {\n        node.height = x;\n        for (const {source} of node.targetLinks) {\n          next.add(source);\n        }\n      }\n      if (++x > n) throw new Error(\"circular link\");\n      current = next;\n      next = new Set;\n    }\n  }\n\n  function computeNodeLayers({nodes}) {\n    const x = max(nodes, d => d.depth) + 1;\n    const kx = (x1 - x0 - dx) / (x - 1);\n    const columns = new Array(x);\n    for (const node of nodes) {\n      const i = Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x))));\n      node.layer = i;\n      node.x0 = x0 + i * kx;\n      node.x1 = node.x0 + dx;\n      if (columns[i]) columns[i].push(node);\n      else columns[i] = [node];\n    }\n    if (sort) for (const column of columns) {\n      column.sort(sort);\n    }\n    return columns;\n  }\n\n  function initializeNodeBreadths(columns) {\n    const ky = min(columns, c => (y1 - y0 - (c.length - 1) * py) / sum(c, value));\n    for (const nodes of columns) {\n      let y = y0;\n      for (const node of nodes) {\n        node.y0 = y;\n        node.y1 = y + node.value * ky;\n        y = node.y1 + py;\n        for (const link of node.sourceLinks) {\n          link.width = link.value * ky;\n        }\n      }\n      y = (y1 - y + py) / (nodes.length + 1);\n      for (let i = 0; i < nodes.length; ++i) {\n        const node = nodes[i];\n        node.y0 += y * (i + 1);\n        node.y1 += y * (i + 1);\n      }\n      reorderLinks(nodes);\n    }\n  }\n\n  function computeNodeBreadths(graph) {\n    const columns = computeNodeLayers(graph);\n    py = Math.min(dy, (y1 - y0) / (max(columns, c => c.length) - 1));\n    initializeNodeBreadths(columns);\n    for (let i = 0; i < iterations; ++i) {\n      const alpha = Math.pow(0.99, i);\n      const beta = Math.max(1 - alpha, (i + 1) / iterations);\n      relaxRightToLeft(columns, alpha, beta);\n      relaxLeftToRight(columns, alpha, beta);\n    }\n  }\n\n  // Reposition each node based on its incoming (target) links.\n  function relaxLeftToRight(columns, alpha, beta) {\n    for (let i = 1, n = columns.length; i < n; ++i) {\n      const column = columns[i];\n      for (const target of column) {\n        let y = 0;\n        let w = 0;\n        for (const {source, value} of target.targetLinks) {\n          let v = value * (target.layer - source.layer);\n          y += targetTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - target.y0) * alpha;\n        target.y0 += dy;\n        target.y1 += dy;\n        reorderNodeLinks(target);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  // Reposition each node based on its outgoing (source) links.\n  function relaxRightToLeft(columns, alpha, beta) {\n    for (let n = columns.length, i = n - 2; i >= 0; --i) {\n      const column = columns[i];\n      for (const source of column) {\n        let y = 0;\n        let w = 0;\n        for (const {target, value} of source.sourceLinks) {\n          let v = value * (target.layer - source.layer);\n          y += sourceTop(source, target) * v;\n          w += v;\n        }\n        if (!(w > 0)) continue;\n        let dy = (y / w - source.y0) * alpha;\n        source.y0 += dy;\n        source.y1 += dy;\n        reorderNodeLinks(source);\n      }\n      if (sort === undefined) column.sort(ascendingBreadth);\n      resolveCollisions(column, beta);\n    }\n  }\n\n  function resolveCollisions(nodes, alpha) {\n    const i = nodes.length >> 1;\n    const subject = nodes[i];\n    resolveCollisionsBottomToTop(nodes, subject.y0 - py, i - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, subject.y1 + py, i + 1, alpha);\n    resolveCollisionsBottomToTop(nodes, y1, nodes.length - 1, alpha);\n    resolveCollisionsTopToBottom(nodes, y0, 0, alpha);\n  }\n\n  // Push any overlapping nodes down.\n  function resolveCollisionsTopToBottom(nodes, y, i, alpha) {\n    for (; i < nodes.length; ++i) {\n      const node = nodes[i];\n      const dy = (y - node.y0) * alpha;\n      if (dy > 1e-6) node.y0 += dy, node.y1 += dy;\n      y = node.y1 + py;\n    }\n  }\n\n  // Push any overlapping nodes up.\n  function resolveCollisionsBottomToTop(nodes, y, i, alpha) {\n    for (; i >= 0; --i) {\n      const node = nodes[i];\n      const dy = (node.y1 - y) * alpha;\n      if (dy > 1e-6) node.y0 -= dy, node.y1 -= dy;\n      y = node.y0 - py;\n    }\n  }\n\n  function reorderNodeLinks({sourceLinks, targetLinks}) {\n    if (linkSort === undefined) {\n      for (const {source: {sourceLinks}} of targetLinks) {\n        sourceLinks.sort(ascendingTargetBreadth);\n      }\n      for (const {target: {targetLinks}} of sourceLinks) {\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  function reorderLinks(nodes) {\n    if (linkSort === undefined) {\n      for (const {sourceLinks, targetLinks} of nodes) {\n        sourceLinks.sort(ascendingTargetBreadth);\n        targetLinks.sort(ascendingSourceBreadth);\n      }\n    }\n  }\n\n  // Returns the target.y0 that would produce an ideal link from source to target.\n  function targetTop(source, target) {\n    let y = source.y0 - (source.sourceLinks.length - 1) * py / 2;\n    for (const {target: node, width} of source.sourceLinks) {\n      if (node === target) break;\n      y += width + py;\n    }\n    for (const {source: node, width} of target.targetLinks) {\n      if (node === source) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  // Returns the source.y0 that would produce an ideal link from source to target.\n  function sourceTop(source, target) {\n    let y = target.y0 - (target.targetLinks.length - 1) * py / 2;\n    for (const {source: node, width} of target.targetLinks) {\n      if (node === source) break;\n      y += width + py;\n    }\n    for (const {target: node, width} of source.sourceLinks) {\n      if (node === target) break;\n      y -= width;\n    }\n    return y;\n  }\n\n  return sankey;\n}\n"]},"metadata":{},"sourceType":"module"}